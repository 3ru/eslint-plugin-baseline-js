#!/usr/bin/env node
import { mkdirSync, writeFileSync } from "node:fs";
import { dirname, resolve } from "node:path";
import { fileURLToPath } from "node:url";
import { features as wfFeatures } from "web-features";

const __dirname = dirname(fileURLToPath(import.meta.url));

const jsEntries = Object.entries(wfFeatures).filter(([_, f]) => f.group === "javascript");

const pick = (f) => ({
  id: undefined, // placeholder to be set by caller
  name: f.name,
  group: f.group,
  status: {
    baseline: f.status?.baseline,
    baseline_low_date: f.status?.baseline_low_date,
    baseline_high_date: f.status?.baseline_high_date,
    support: f.status?.support,
  },
  discouraged: f.discouraged,
});

const out = {};
// For now, we only support features where group is 'javascript'.
for (const [id, f] of jsEntries) {
  const entry = pick(f);
  entry.id = id;
  out[id] = entry;
}

const outDir = resolve(__dirname, "..", "src", "baseline", "data");
mkdirSync(outDir, { recursive: true });

// Write TS with header banner (human-readable, do-not-edit notice)
const header =
  "/**\n * @fileoverview AUTOGENERATED â€” JavaScript language features (group=javascript) from web-features.\n * THIS FILE IS AUTOGENERATED. DO NOT MODIFY DIRECTLY.\n */";
const tsBody = `${header}\n\nexport default ${JSON.stringify(out, null, 2)} as const;\n`;
const outTs = resolve(outDir, "features.javascript.ts");
writeFileSync(outTs, tsBody, "utf-8");

console.log(`Wrote ${Object.keys(out).length} JS language features to ${outTs}`);
