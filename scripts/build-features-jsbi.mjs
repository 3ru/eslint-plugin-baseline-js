#!/usr/bin/env node
import { mkdirSync, writeFileSync } from "node:fs";
import { dirname, resolve } from "node:path";
import { fileURLToPath } from "node:url";
import { features as wfFeatures } from "web-features";

const __dirname = dirname(fileURLToPath(import.meta.url));

const entries = Object.entries(wfFeatures).filter(
  ([, f]) =>
    Array.isArray(f.compat_features) &&
    f.compat_features.some((k) => typeof k === "string" && k.startsWith("javascript.builtins")),
);

const pick = (f) => ({
  id: undefined,
  name: f.name,
  group: f.group,
  status: {
    baseline: f.status?.baseline,
    baseline_low_date: f.status?.baseline_low_date,
    baseline_high_date: f.status?.baseline_high_date,
    support: f.status?.support,
  },
  discouraged: f.discouraged,
});

const out = {};
for (const [id, f] of entries) {
  const e = pick(f);
  e.id = id;
  out[id] = e;
}

const header = `/**\n * @fileoverview AUTOGENERATED â€” JS builtins features (javascript.*) from web-features.\n * Do not edit directly.\n */`;
const body = `${header}\n\nexport default ${JSON.stringify(out, null, 2)} as const;\n`;

const outPath = resolve(__dirname, "..", "src", "baseline", "data", "features.jsbi.ts");
mkdirSync(dirname(outPath), { recursive: true });
writeFileSync(outPath, body, "utf-8");
console.log(`Wrote ${Object.keys(out).length} JS builtins features to ${outPath}`);
